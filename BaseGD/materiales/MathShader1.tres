[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec4 color;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	
	
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	float delta = TIME;

vec2 image = vec2(1024,1024);
float w = image.x;
float h = image.y;
float f1 = float(sin(2.0*delta+(base_uv.y/4.0*cos(delta/3.0)+(base_uv.x/2.0)-w/4.0)*((base_uv.y/3.0)-h/4.0)/w));
float f2 = float(-2.0*cos(11.0*delta/9.0-11.0*float(pow(float(base_uv.y),float(base_uv.x)))/9.0));
float r = float((f2+f1)/4.0*abs(cos(2.0*(base_uv.x-base_uv.y)/w+delta)));
float g = float((f2+f1)/(3.0+r));
float b = float((f2+f1)/2.5+g);
vec4 albedo_tex = vec4(r,g,b,1);
ALBEDO = albedo_tex.rgb;
 }
"

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/uv1_scale = Vector3( 3, 3, 5 )
shader_param/uv1_offset = Vector3( 2, 2, 2 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/color = null
_sections_unfolded = [ "shader_param" ]

